# para funcionar precisa dos secrets que estao no .env
# kubectl create secret generic postgres-credentials --from-env-file=.env
# se estiver usando minikube, utilize o tunnel pro loadbalancer funcionar
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi
  labels: 
    app: fastapi  
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fastapi 
  template:
    metadata:
      labels:
        app: fastapi
    spec:
      containers:
        - name: legal
          image: "otaviocosta2110/fastpython:latest"
          ports:
            - containerPort: 8000
          envFrom:
            - secretRef:
                name: postgres-credentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: "postgres:latest"
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: postgres-credentials
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-volume-claim
---
apiVersion: v1
kind: Service
metadata:
  name: fastapi-service
spec:
  selector:
    app: fastapi
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: LoadBalancer 

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /data/postgresql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-volume-claim
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
